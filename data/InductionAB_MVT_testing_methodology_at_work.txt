<script type="text/javascript">
    function Config() {
        var config = {
            altCol: {
                'visitor1_visitor2_content1_content2': {
                    'state': {
                        'click': 0,
                        'keyup': 0
                    },
                    '_config': null,
                    'src': " /data/images/visitor1_visitor2_content1_content2.png",
                    'width': '40%',
                    'enlargeToWidth': 45,
                    'left': 30
                },

                'splitting_traffic_between_visitors': {
                    'state': {
                        'click': 0,
                        'keyup': 0
                    },
                    '_config': null,
                    'src': " /data/images/splitting_traffic_between_visitors.png",
                    'width': '40%',
                    'enlargeToWidth': 45,
                    'left': 30
                },

                'combinations_diagram': {
                    'state': {
                        'click': 0,
                        'keyup': 0
                    },
                    '_config': null,
                    'src': " /data/images/combinations_diagram.png",
                    'width': '40%',
                    'enlargeToWidth': 45,
                    'left': 30
                }


            },

            getter: function(alt, _config, src, width, enlargeToWidth, left) {
                if (_config && alt) {
                    return config.altCol[alt] && config.altCol[alt]['_config'] ? config.altCol[alt]['_config'] : null;
                } else if (!_config && alt && !src && !width && !enlargeToWidth && !left) {
                    if (config.altCol[alt]) {
                        return config.altCol[alt] && config.altCol[alt]['state'] ? config.altCol[alt]['state'] : null;
                    } else {
                        return false;
                    }
                } else if (!arguments.length) {
                    return Object.keys(config.altCol);
                } else if (alt && src) {
                    return config.altCol[alt] && config.altCol[alt]['src'] ? config.altCol[alt]['src'] : null;
                } else if (alt && width) {
                    return config.altCol[alt] && config.altCol[alt]['width'] ? config.altCol[alt]['width'] : null;
                } else if (alt && enlargeToWidth) {
                    return config.altCol[alt] && config.altCol[alt]['enlargeToWidth'] ? config.altCol[alt]['enlargeToWidth'] : null;
                } else if (alt && left) {
                    return config.altCol[alt] && config.altCol[alt]['left'] ? config.altCol[alt]['left'] : null;
                }
            },

            setter: function(alt, val, _config) {
                if (_config && alt) {
                    !config.altCol[alt]['_config'] ? config.altCol[alt]['_config'] = _config : '';
                } else if (alt && val) {
                    if (({}).toString.call(val) === '[object Object]') {
                        for (var i in val) {
                            config.altCol[alt]['state'][i] = val[i];
                        }
                    }
                }
            },

            domReady: function(callback) {
                config.eventsBinder(document, 'DOMContentLoaded', callback);
                config.eventsBinder(document, 'onreadystatechange', function() {
                    if (document.readyState === 'complete') {
                        callback();
                    }
                });
                config.eventsBinder(window, 'load', callback);
            },

            eventsBinder: function(El, event, handler) {
                if (El && El.addEventListener) {
                    El.addEventListener(event, handler);
                } else if (El && El.attachEvent) {
                    El.attachEvent('on' + event, handler);
                }
            },

            eventsUnbinder: function(El, event, handler) {
                if (El && El.removeEventListener) {
                    El.removeEventListener(event, handler);
                }

                if (El && El.detachEvent) {
                    El.detachEvent('on' + event, handler);
                }
            },

            constructor: function(targetEl, _e, _g, s, _u) {
                var _config = {
                    documentCreateElement: function(El, id, style, text) {
                        var returnable;
                        if (El) {
                            returnable = document.createElement(El);
                            id ? returnable.id = id : '';
                            if (style && ({}).toString.call(style) === '[object Array]') {
                                for (var i = style.length; i--;) {
                                    if (({}).toString.call(style[i]) === '[object Object]') {
                                        for (var j in style[i]) {
                                            returnable.style[j] = style[i][j];
                                        }
                                    }
                                }
                            }

                            if (text && ({}).toString.call(text) === '[object String]') {
                                returnable['innerText' in returnable ? 'innerText' : 'innerHTML'] = text;
                            }
                        }
                        return returnable;
                    },
                    appendOpacityDivToBody: function() {

                        document.body.appendChild(_config.documentCreateElement('div', 'OpacityDivToBody', [{
                            'backgroundColor': '#000'
                        }, {
                            'bottom': '0'
                        }, {
                            'left': '0'
                        }, {
                            'opacity': '0.7'
                        }, {
                            'position': 'fixed'
                        }, {
                            'right': '0'
                        }, {
                            'top': '0'
                        }, {
                            'zIndex': '9999'
                        }]));
                    },

                    scroller: function(e) {
                        var event = window.event || e,
                            delta = event.detail ? event.detail * (-120) : event.wheelDelta,
                            subRoutine = function(d) {
                                var handledImageContainer = document.querySelector('#handledImageContainer');
                                if (d >= 120 && handledImageContainer) {
                                    handledImageContainer.style.width = parseInt(handledImageContainer.style.width.match(/\d+/)) + 1 + '%';
                                }
                                if (d <= -120 && handledImageContainer) {
                                    handledImageContainer.style.width = parseInt(handledImageContainer.style.width.match(/\d+/)) - 1 + '%';
                                }
                            };
                        if (delta && event.ctrlKey) {
                            subRoutine(delta);
                        }
                        return false;
                    },

                    arrowPress: function(e) {
                        var event = e || window.event,
                            handledImageContainer = document.querySelector('#handledImageContainer'),
                            leftDefaultValue = handledImageContainer ? _g(handledImageContainer.querySelector('img').alt, '', '', '', '', 1) : null,
                            imageParentNodeEnlargedWidth = handledImageContainer ? _g(handledImageContainer.querySelector('img').alt, '', '', '', 1) : null;

                        switch (event.keyCode.toString()) {

                            case '38':
                                {
                                    handledImageContainer.style.top =
                                        parseInt(handledImageContainer.style.top.match(/[-]?\d+/)) - 1 + '%';
                                    break;
                                }

                            case '40':
                                {
                                    handledImageContainer.style.top =
                                        parseInt(handledImageContainer.style.top.match(/[-]?\d+/)) + 1 + '%';
                                    break;
                                }
                            case '37' || '':
                                {
                                    !handledImageContainer.style.left ||
                                        parseInt(handledImageContainer.style.left.match(/[-]?\d+/)) > leftDefaultValue ?
                                        handledImageContainer.style.left = leftDefaultValue + '%' : handledImageContainer.style.left;
                                    handledImageContainer.style.left = parseInt(handledImageContainer.style.left.match(/[-]?\d+/)) - 1 + '%';
                                    break;
                                }

                            case '39':
                                {
                                    !handledImageContainer.style.left ||
                                        parseInt(handledImageContainer.style.left.match(/[-]?\d+/)) < leftDefaultValue ?
                                        handledImageContainer.style.left = leftDefaultValue + '%' : handledImageContainer.style.left;
                                    handledImageContainer.style.left =
                                        parseInt(handledImageContainer.style.left.match(/[-]?\d+/)) + 1 + '%';
                                    break;
                                }
                            case '48':
                                {
                                    if (event.ctrlKey) {
                                        parseInt(handledImageContainer.style.width.match(/[-]?\d+/)) > imageParentNodeEnlargedWidth ||
                                            parseInt(handledImageContainer.style.width.match(/[-]?\d+/)) < imageParentNodeEnlargedWidth ?
                                            handledImageContainer.style.width = imageParentNodeEnlargedWidth + '%' : '';
                                        parseInt(handledImageContainer.style.left.match(/[-]?\d+/)) !== leftDefaultValue ?
                                            handledImageContainer.style.left = leftDefaultValue + '%' : '';
                                    }
                                    break;
                                }
                            case '187':
                                {
                                    if (event.ctrlKey) {
                                        handledImageContainer.style.width = parseInt(handledImageContainer.style.width.match(/\d+/)) + 1 + '%';
                                    }
                                    break;
                                }

                            case '189':
                                {
                                    if (event.ctrlKey) {
                                        handledImageContainer.style.width = parseInt(handledImageContainer.style.width.match(/\d+/)) - 1 + '%';
                                    }
                                    break;
                                }
                        }
                    },

                    handler: function(e) {
                        var _e = e || event,
                            executable,
                            _ex = e.target,
                            subRoutine = function(eventType) {

                                var OpacityDivToBody = document.getElementById('OpacityDivToBody');
                                if (OpacityDivToBody) {
                                    OpacityDivToBody.parentNode.removeChild(OpacityDivToBody);
                                }
                                if (document.querySelector('#main') && document.querySelector('#handledImageContainer')) {
                                    document.querySelector('#main').removeChild(document.querySelector('#handledImageContainer'));
                                }

                                _u(_ex, eventType, _config.handler);
                                _u(document, event.type, _config.scroller);
                                _u(window, eventType, _config.handler);

                                var a = {};
                                a[eventType.toString()] = 0;
                                s(targetEl.alt, a);
                            };

                        if (_e.type === 'keyup' | 'onkeyup') {
                            executable = function() {
                                if (_e.keyCode.toString() === '27') {
                                    subRoutine(_e.type);
                                }
                            };
                        } else if (_e.type === 'click' | 'onclick') {
                            executable = function() {
                                subRoutine(_e.type);
                            };
                        }
                        executable();
                    },

                    handleImageContainer: function() {
                        if (targetEl) {
                            if (!document.getElementById('handledImageContainer')) {

                                var _el = _config.documentCreateElement('div', 'handledImageContainer', [{
                                        'display': 'block'
                                    }, {
                                        'width': _g(targetEl.alt, '', '', '', 1) + '%'
                                    }, {
                                        'position': 'fixed'
                                    }, {
                                        'zIndex': '10001'
                                    }, {
                                        'top': '5%'
                                    }, {
                                        'background': '#FFF'
                                    }, {
                                        'text-align': 'center'
                                    }, {
                                        'left': (_g(targetEl.alt, '', '', '', '', 1) + '%') ? (_g(targetEl.alt, '', '', '', '', 1) + '%') : 0
                                    }]),
                                    _ex = _config.documentCreateElement('div', '', [{
                                        'background-image': "url('https://maxymiserbpos.sharepoint.com/sites/ua/training/Shared%20Documents/InductionAssets/close.png')"
                                    }, {
                                        'position': 'absolute'
                                    }, {
                                        'display': 'inline-block'
                                    }, {
                                        'background-repeat': 'no-repeat'
                                    }, {
                                        'cursor': 'pointer'
                                    }, {
                                        'height': '45px'
                                    }, {
                                        'width': '40px'
                                    }, {
                                        'padding-left': '1%'
                                    }, {
                                        'background-size': '100% 100%'
                                    }, {
                                        'background-position-x': '-4px'
                                    }, {
                                        'background-position-y': '-7px'
                                    }], ''),
                                    imgClone,
                                    mousewheelEvt = (/Firefox/i.test(navigator.userAgent)) ? "DOMMouseScroll" : "mousewheel";

                                imgClone = targetEl.cloneNode();
                                imgClone.style.width = '95%';
                                imgClone.style.marginLeft = '0';
                                imgClone.style.paddingTop = '8px';

                                document.getElementById('main').appendChild(_el);
                                _el.appendChild(imgClone);
                                _el.appendChild(_ex);

                                if (!_g(targetEl.alt)['mousewheelEvt']) {
                                    s(targetEl.alt, {
                                        'mousewheelEvt': 1
                                    });
                                    _e(document, mousewheelEvt, _config.scroller);
                                }

                                s(targetEl.alt, {
                                    'click': 1
                                });

                                _e(_ex, 'click', function(e) {
                                    _config.handler(e);
                                });

                                if (!_g(targetEl.alt)['keyup']) {
                                    s(targetEl.alt, {
                                        'keyup': 1
                                    });
                                    _e(window, 'keyup', function(e) {
                                        _config.handler(e);
                                    });
                                }

                                if (!_g(targetEl.alt)['arrowPress']) {
                                    s(targetEl.alt, {
                                        'arrowPress': 1
                                    });
                                    _e(window, 'keydown', _config.arrowPress);
                                }

                                if (!document.querySelector('#OpacityDivToBody')) {
                                    _config.appendOpacityDivToBody();
                                }
                            }
                        }
                    },
                    onclickHandler: function() {
                        _config.handleImageContainer();
                    }
                };

                return {
                    o: _config.onclickHandler
                }
            }
        };

        return {
            d: config.domReady,
            e: config.eventsBinder,
            u: config.eventsUnbinder,
            s: config.setter,
            g: config.getter,
            F: config.constructor
        }
    };

    var config = new Config();
    config.g().forEach(function(i) {
        var img = new Image(),
            parent = document.querySelector('#' + i);
        img.alt = i;
        img.src = config.g(i, '', 1);
        img.style.cursor = 'pointer';
        img.style.width = config.g(i, '', '', 1);
        parent ? parent.appendChild(img) : null;
    });

    config.e(document, 'click', function(e) {
        var event = e || event,
            target = event.target || event.srcElement;
        if ((target.tagName === 'IMG' && config.g(target.alt))) {
            if (!config.g(target.alt, 1)) {
                var _config = new config.F(target, config.e, config.g, config.s, config.u);
                config.s(target.alt, '', _config);
            }
            if (config.g(target.alt, 1)) {
                config.g(target.alt, 1).o();
            }
        }
    });
</script>


<div id="main" style="font-size: 10pt; font-family: arial, helvetica, sans-serif;">
    <div style="margin-left: auto; margin-right: auto; border: 1px solid white; width: 98%;">
        <table style="width: 100%; border: 2px; margin-left: auto; margin-right: auto; font-size: 16px;">
            <tbody>
                <tr>
                    <th valign="middle" style="height: 2em; font-weight: bold; border: 1px solid white; text-align: center; color:#900000; padding: 1px;   vertical-align: middle;">A/B Testing, MVT Testing</th>
                </tr>
                <tr>
                </tr>
            </tbody>
        </table>
    </div>

    <div style="margin-left: auto; margin-right: auto; height: 2em; font-size: 16px; color: #333399; width: 98%; text-align: center;">
        <div style="margin-top: 0.5em;">Methodology at Work</div>
    </div>

    <div style="margin-left: auto; margin-right: auto; border: 1px solid #6690bc; width: 98%; text-align: center;">
        <span style="text-align: center; line-height: 30px; color: #6690bc; font-size: 17px;">'User Journey', CTA, Experiences, Splitting Traffic</span>
        <table style="margin: 0px auto; width: 94%;">
            <tbody>
                <tr>
                    <td colspan="3" style="width: 28px; text-align: left; padding-left: 30px;">
                        <p>
                            <span style="line-height: 1.5em; color: #000000; font-size: 10pt;
 ">It is crucial to specify which user-action will serve as a measuring metric. For successful measurability, it is important to identify the most evident user-journeys: in other words, most effective routes that would lead to expected actions towards conversion.
 
 </span>
                        </p>

                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">'User-journeys' are so called routes that the user is certain to make across a website, for example, clicking through towards a targeted location.</span>
                        </p>
                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">Statistically significant website elements that lead to expected visitor responses are also known as a 'Call to Action', CTA - for short. CTA may be part of significant user-journeys.</span>
                        </p>
                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">'A/B Testing' can target a webpage area or the entire website, while 'Multivariate Testing' focuses on multiple elements and content variations. Successfully increased conversion rate, which is the result of comparing conversion rates of control-variant and alternative variant, is also known as 'upsell' or 'uplift'.</span>
                        </p>
                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">As website visitors are randomly shown 'Content A' or 'Content B' in equal proportions, user-actions are captured for data analysis. This is called 'splitting traffic' for different user-experiences. That is why 'A/B testing' may also be referred to as 'split testing'.</span>
                        </p>

                        <p style="margin-left: 30px;">
                            <span style="color: #000000; font-size: 10pt;">      <span style="color: #339;">Click Images to Enlarge</span></span>
                        </p>

                        <div id="visitor1_visitor2_content1_content2" style="text-align: center;"></div>
                        <p>
                            <span style="line-height: 1.5em; color: #000000; font-size: 10pt;">As soon as the Test completes, user-responses collected from the website are summed up to statistically measure out the variance between given content variations.</span>
                        </p>

                        <p>
                            <span style="line-height: 1.5em; color: #000000; font-size: 10pt;
 "> An instance of such testing is usually referred to as a campaign. While campaigns are under way, website owners are monitoring the process, which may lead to changes in 'traffic splitting' settings, or even result in determining the winner ahead of time. If that is the case, campaign may be paused or stopped.
 </span>
                        </p>
                        <div id="splitting_traffic_between_visitors" style="text-align: center;"></div>
                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">Continual A/B Testing of page Elements may embrace more than just two variants, hence the 'A/B/C/D... [N] Testing'. A/B Tests may run on several webpages and cover the whole of a given domain.</span>
                        </p>
                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">Traffic splitting in MVT and A/B tests is performed by grouping users. Content Generator will randomly split the inbound traffic according to the preset weightings of a given Variant in UI. 'Weight' is a setting that determines proportion of specific Variant generations. The logic of MVT visitor-breakdown is shown on the screenshot below:</span>
                        </p>
                        <div id="combinations_diagram" style="text-align: center;"></div>
                        <p><span style="line-height: 1.5em; color: #000000; font-size: 10pt;">The same as A/B, MVT components may be located on a single webpage altogether or may embrace a multi-step process, as a constituent part of a site template, i.e. a product page.</span>
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>
        </p>
    </div>
</div>